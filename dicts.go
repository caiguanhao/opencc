// this file is generated by dicts_test.go

package opencc

import (
	"github.com/caiguanhao/opencc/dicts"
	"github.com/liuzl/da"
)

var (
	Dictionaries = map[string]string{
		"hk2s":  "Traditional Chinese (Hong Kong standard) to Simplified Chinese",
		"jp2t":  "New Japanese Kanji (Shinjitai) to Traditional Chinese Characters (Kyūjitai)",
		"s2hk":  "Simplified Chinese to Traditional Chinese (Hong Kong standard)",
		"s2t":   "Simplified Chinese to Traditional Chinese",
		"s2tw":  "Simplified Chinese to Traditional Chinese (Taiwan standard)",
		"s2twp": "Simplified Chinese to Traditional Chinese (Taiwan standard, with phrases)",
		"t2hk":  "Traditional Chinese to Traditional Chinese (Hong Kong standard)",
		"t2jp":  "Traditional Chinese Characters (Kyūjitai) to New Japanese Kanji (Shinjitai)",
		"t2s":   "Traditional Chinese to Simplified Chinese",
		"t2tw":  "Traditional Chinese to Traditional Chinese (Taiwan standard)",
		"tw2s":  "Traditional Chinese (Taiwan standard) to Simplified Chinese",
		"tw2sp": "Traditional Chinese (Taiwan standard) to Simplified Chinese (with phrases)",
	}
)

func dictsForName(name string) [][]*da.Dict {
	if name == "hk2s" {
		return [][]*da.Dict{
			{
				dicts.HKVariantsRevPhrases,
				dicts.HKVariantsRev,
			},
			{
				dicts.TSPhrases,
				dicts.TSCharacters,
			},
		}
	}
	if name == "jp2t" {
		return [][]*da.Dict{
			{
				dicts.JPShinjitaiPhrases,
				dicts.JPShinjitaiCharacters,
				dicts.JPVariantsRev,
			},
		}
	}
	if name == "s2hk" {
		return [][]*da.Dict{
			{
				dicts.STPhrases,
				dicts.STCharacters,
			},
			{
				dicts.HKVariants,
			},
		}
	}
	if name == "s2t" {
		return [][]*da.Dict{
			{
				dicts.STPhrases,
				dicts.STCharacters,
			},
		}
	}
	if name == "s2tw" {
		return [][]*da.Dict{
			{
				dicts.STPhrases,
				dicts.STCharacters,
			},
			{
				dicts.TWVariants,
			},
		}
	}
	if name == "s2twp" {
		return [][]*da.Dict{
			{
				dicts.STPhrases,
				dicts.STCharacters,
			},
			{
				dicts.TWPhrases,
			},
			{
				dicts.TWVariants,
			},
		}
	}
	if name == "t2hk" {
		return [][]*da.Dict{
			{
				dicts.HKVariants,
			},
		}
	}
	if name == "t2jp" {
		return [][]*da.Dict{
			{
				dicts.JPVariants,
			},
		}
	}
	if name == "t2s" {
		return [][]*da.Dict{
			{
				dicts.TSPhrases,
				dicts.TSCharacters,
			},
		}
	}
	if name == "t2tw" {
		return [][]*da.Dict{
			{
				dicts.TWVariants,
			},
		}
	}
	if name == "tw2s" {
		return [][]*da.Dict{
			{
				dicts.TWVariantsRevPhrases,
				dicts.TWVariantsRev,
			},
			{
				dicts.TSPhrases,
				dicts.TSCharacters,
			},
		}
	}
	if name == "tw2sp" {
		return [][]*da.Dict{
			{
				dicts.TWPhrasesRev,
				dicts.TWVariantsRevPhrases,
				dicts.TWVariantsRev,
			},
			{
				dicts.TSPhrases,
				dicts.TSCharacters,
			},
		}
	}
	return nil
}
